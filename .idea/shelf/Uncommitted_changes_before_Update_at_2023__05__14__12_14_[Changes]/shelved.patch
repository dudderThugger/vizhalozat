Index: src/Vizhalozat/Szerelo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Vizhalozat;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * A szerelőket reprezentáló osztály, a közös akciókon felül képesek foltozni, pumpát szerelni és\r\n * pumpát venni\r\n */\r\npublic class Szerelo extends Jatekos{\r\n    private Pumpa pumpaTart;\r\n    public Szerelo() {\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Amennyiben van a szerelő kezében pumpa, \"kettévágja\" a csövet amin áll\r\n     * és a régi és a létrejött cső közé beköti a pumpát\r\n     * a Vihető függvényét valósítja meg\r\n     */\r\n    public void lerak_pumpa() {\r\n        if (pumpaTart != null) {\r\n            if (rajtaAll.pumpaLehelyez(pumpaTart)) {\r\n                Cso uj = new Cso(jatek);\r\n                ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();\r\n                Mezo szomszed = szomszedok.get(0);\r\n                rajtaAll.removeSzomszed(szomszed);\r\n                uj.addSzomszed(szomszed);\r\n                uj.addSzomszed(pumpaTart);\r\n                tart.lerakjak(this);\r\n                pumpaTart.addSzomszed(uj);\r\n                pumpaTart.addSzomszed(rajtaAll);\r\n                szomszed.removeSzomszed(rajtaAll);\r\n                szomszed.addSzomszed(uj);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A szerelő a Forrásoknál képes \"venni\" pumpát\r\n     * ilyenkor lényegében a Forrás amin áll a Szerelő, legenerál egy új pumpát beleteszi a Szerelő kezébe\r\n     */\r\n    public void pumpatvesz(){\r\n        Pumpa p = rajtaAll.pumpaVasarlas();\r\n        if(tart ==null){\r\n            tart =p;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * a Szerelőnek a \"kezébe nyomja\" az adott pumpát\r\n     * @param t, amit a szerelő megkap a kezébe\r\n     */\r\n    public void add_PumpaTart(Pumpa t){\r\n        pumpaTart = t;\r\n        tart = t;\r\n    }\r\n\r\n    /**\r\n     * Lekéri a szerelőnél lévő pumpát\r\n     * @return kézben tartott pumpa referenciája\r\n     */\r\n    public Pumpa get_PumpaTart(){\r\n        return pumpaTart;\r\n    }\r\n\r\n    /**\r\n     * Amennyiben lyukas az adott cső amin a Szerelő áll, azt ezzel a függvénnyel befoltozza\r\n     */\r\n    public void foltoz() {\r\n            rajtaAll.foltoz();\r\n    }\r\n\r\n    /**\r\n     * Amennyiben nem mukodik a,a szerelo megjavitja\r\n     */\r\n    public void szerel(){\r\n        rajtaAll.javitjak();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Vizhalozat/Szerelo.java b/src/Vizhalozat/Szerelo.java
--- a/src/Vizhalozat/Szerelo.java	(revision 824187d81812c0404066c0d49ae14df418daebbe)
+++ b/src/Vizhalozat/Szerelo.java	(date 1684054098330)
@@ -11,7 +11,6 @@
     private Pumpa pumpaTart;
     public Szerelo() {
 
-
     }
 
     /**
Index: src/Vizhalozat/Proto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Vizhalozat;\r\n\r\nimport javax.sound.midi.Soundbank;\r\nimport java.awt.print.PrinterException;\r\nimport java.io.Console;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class Proto {\r\n    private HashMap<String, ProtoJatek> jatekAdatok = new HashMap<String, ProtoJatek>();\r\n    private ProtoJatek jelenlegiJatek = null;\r\n\r\n    private class ProtoJatek {\r\n        Jatek jatek = new Jatek();\r\n        boolean randomKi;\r\n        HashMap<String, Jatekos> jatekosok = new HashMap<>();\r\n        HashMap<String, Szerelo> szerelok = new HashMap<>();\r\n        HashMap<String, Szabotor> szabotorok = new HashMap<>();\r\n        HashMap<String, Mezo> mezok = new HashMap<>();\r\n        HashMap<String, Cso> csovek = new HashMap<>();\r\n    }\r\n\r\n    private class ProtoException extends RuntimeException {}\r\n\r\n    public void parancsIndito() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Vizhalozat prototipusa\\n\\n\");\r\n        parancsKezelo(scanner);\r\n    }\r\n\r\n    public void parancsKezelo(Scanner scanner) {\r\n        while(scanner.hasNext()) {\r\n            String[] arguments = scanner.nextLine().split(\" \");\r\n            switch (arguments[0]) {\r\n                case \"JatekLetrehoz\":\r\n                    String ujJatekNeve = arguments[1];\r\n                    if (!jatekAdatok.containsKey(ujJatekNeve)) {\r\n                        jatekAdatok.put(ujJatekNeve, new ProtoJatek());\r\n                        System.out.println(ujJatekNeve + \" sikeresen letrehozva!\");\r\n                    } else {\r\n                        System.out.println(\"Nem sikerult letrehozni a jatekot!\");\r\n                    }\r\n                    break;\r\n                case \"JatekKivalaszt\":\r\n                    String jatekNeve = arguments[1];\r\n                    if (jatekAdatok.containsKey(jatekNeve)) {\r\n                        jelenlegiJatek = jatekAdatok.get(jatekNeve);\r\n                        System.out.println(jatekNeve + \" kivalasztva!\");\r\n                    } else {\r\n                        System.out.println(\"Nem sikerult kivalasztani a jatekot!\");\r\n                    }\r\n                    break;\r\n                case \"JatekKilep\":\r\n                    jelenlegiJatek = null;\r\n                    System.out.println(\"Kilepes\");\r\n                    break;\r\n                case \"Futtatas\": {\r\n                    File fajl = new File(arguments[1]);\r\n                    try {\r\n                        parancsKezelo(new Scanner(fajl));\r\n                    } catch (FileNotFoundException e) {\r\n                        System.out.println(\"Nem talalhato a megadott fajl!\");\r\n                    }\r\n                    break;\r\n                }\r\n                case \"JatekosLetrehoz\":\r\n                    String ujJatekosNeve = arguments[1];\r\n                    String jatekosTipus = arguments[2];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.jatekosok.containsKey(ujJatekosNeve)) throw new ProtoException();\r\n                        if (jatekosTipus.equals(\"szerelo\")) {\r\n                            Szerelo ujSzerelo = new Szerelo();\r\n                            jelenlegiJatek.jatek.addJatekos(ujSzerelo);\r\n                            jelenlegiJatek.jatekosok.put(ujJatekosNeve, ujSzerelo);\r\n                            jelenlegiJatek.szerelok.put(ujJatekosNeve, ujSzerelo);\r\n                        } else if (jatekosTipus.equals(\"szabotor\")) {\r\n                            Szabotor ujSzabotor = new Szabotor();\r\n                            jelenlegiJatek.jatek.addJatekos(ujSzabotor);\r\n                            jelenlegiJatek.jatekosok.put(ujJatekosNeve, ujSzabotor);\r\n                            jelenlegiJatek.szabotorok.put(ujJatekosNeve, ujSzabotor);\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                        System.out.println(ujJatekosNeve + \" jatekos sikeresen letrehozva!\");\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult letrehozni a jatekost\");\r\n                    }\r\n                    break;\r\n                case \"MezoLetrehoz\": {\r\n                    String mezoNeve = arguments[1];\r\n                    String mezoTipusa = arguments[2];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.mezok.containsKey(mezoNeve)) throw new ProtoException();\r\n                        if (mezoTipusa.equals(\"ciszterna\")) {\r\n                            Ciszterna ujCiszterna = new Ciszterna(jelenlegiJatek.jatek);\r\n                            jelenlegiJatek.jatek.addMezo(ujCiszterna);\r\n                            jelenlegiJatek.mezok.put(mezoNeve, ujCiszterna);\r\n                        } else if (mezoTipusa.equals(\"cso\")) {\r\n                            Cso ujCso = new Cso(jelenlegiJatek.jatek);\r\n                            jelenlegiJatek.jatek.addMezo(ujCso);\r\n                            jelenlegiJatek.mezok.put(mezoNeve, ujCso);\r\n                            jelenlegiJatek.csovek.put(mezoNeve, ujCso);\r\n                        } else if (mezoTipusa.equals(\"forras\")) {\r\n                            Forras ujForras = new Forras(jelenlegiJatek.jatek);\r\n                            jelenlegiJatek.jatek.addMezo(ujForras);\r\n                            jelenlegiJatek.mezok.put(mezoNeve, ujForras);\r\n                        } else if (mezoTipusa.equals(\"pumpa\")) {\r\n                            Pumpa ujPumpa = new Pumpa(jelenlegiJatek.jatek);\r\n                            jelenlegiJatek.jatek.addMezo(ujPumpa);\r\n                            jelenlegiJatek.mezok.put(mezoNeve, ujPumpa);\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                        System.out.println(mezoNeve + \" mezo sikeresen letrehozva!\");\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult letrehozni a mezot!\");\r\n                    }\r\n                    break;\r\n                }\r\n                case \"SzomszedBeallit\":{\r\n                    String mezo1Neve = arguments[1];\r\n                    String mezo2Neve = arguments[2];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.mezok.containsKey(mezo1Neve) && jelenlegiJatek.mezok.containsKey(mezo2Neve)) {\r\n                            Mezo mezo1 = jelenlegiJatek.mezok.get(mezo1Neve);\r\n                            Mezo mezo2 = jelenlegiJatek.mezok.get(mezo2Neve);\r\n                            mezo1.addSzomszed(mezo2);\r\n                            mezo2.addSzomszed(mezo1);\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                        System.out.println(\"Szomszedsag beallitva!\");\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult beallitani a szomszedokat!\");\r\n                    }\r\n                    break;\r\n            }\r\n            case \"RaAllit\": {\r\n                String jatekosNeve = arguments[1];\r\n                String mezoNeve = arguments[2];\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n                    if (jelenlegiJatek.jatekosok.containsKey(jatekosNeve) && jelenlegiJatek.mezok.containsKey(mezoNeve)) {\r\n                        Jatekos j = jelenlegiJatek.jatekosok.get(jatekosNeve);\r\n                        Mezo m = jelenlegiJatek.mezok.get(mezoNeve);\r\n                        m.ralep(j);\r\n\r\n                        System.out.println( jatekosNeve + \" ráállt a \" + mezoNeve + \" mezőre!\");\r\n                    } else {\r\n                        throw new ProtoException();\r\n                    }\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült ráállítani a mezőre!\");\r\n                }\r\n            }\r\n            case \"KezebeAd\": {\r\n                String jatekosNeve = arguments[1];\r\n                String mezoNeve = arguments[2];\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n                    if (jelenlegiJatek.jatekosok.containsKey(jatekosNeve) && jelenlegiJatek.mezok.containsKey(mezoNeve)) {\r\n                        Jatekos j = jelenlegiJatek.jatekosok.get(jatekosNeve);\r\n                        Mezo m = jelenlegiJatek.mezok.get(mezoNeve);\r\n                        j.add_Kezebe((Viheto)m);\r\n\r\n                        System.out.println( jatekosNeve + \" kezében \" + mezoNeve + \" van!\");\r\n                    } else {\r\n                        throw new ProtoException();\r\n                    }\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült a kézbe adás!\");\r\n                }\r\n            }\r\n            case \"Mentes\": {\r\n                File fajl = new File(arguments[1]);\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n\r\n                    System.out.println(\"Saved!\");\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült a játék mentése!\");\r\n                }\r\n            }\r\n            case \"Betoltes\": {\r\n                File fajl = new File(arguments[1]);\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n\r\n                    System.out.println(\"Sikeres betöltés!\");\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült betölteni a fájlt!\");\r\n                }\r\n            }\r\n            case \"Inditas\": {\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n\r\n                    System.out.println(\"Start!\");\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült elindítani a játékot!\");\r\n                }\r\n            }\r\n            case \"Leallit\": {\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n\r\n                    System.out.println(\"Game Over!\");\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült leállítani a játékot!\");\r\n                }\r\n            }\r\n            case \"Init\": {\r\n                try {\r\n                    if (jelenlegiJatek == null) throw new ProtoException();\r\n                    jelenlegiJatek.jatek.init();\r\n                    if(jelenlegiJatek.randomKi) {\r\n                        System.out.println(\"Inicializálás! \\n\" +\r\n                                \"A következő objektumok jöttek létre:\\n\" +\r\n                                \"szerelo1, szerelo2, szabotor1, szabotor2, forras1, forras2, ciszterna1, ciszterna 2\\n\");\r\n                    } else {\r\n                        System.out.println(\"Inicializálás! \\n\" +\r\n                                \"A következő objektumok jöttek létre:\\n\" +\r\n                                \"<létrejövő objektumok nevei>\\n\");\r\n                    }\r\n                } catch (ProtoException e) {\r\n                    System.out.println(\"Nem sikerült az inicializálás!\");\r\n                }\r\n            }\r\n                case \"Leptet\":\r\n                    String jatekosneve = arguments[1];\r\n                    String mezoneve = arguments[2];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.mezok.containsKey(mezoneve) && jelenlegiJatek.jatekosok.containsKey(jatekosneve)) {\r\n                            Mezo mezo1 = jelenlegiJatek.mezok.get(mezoneve);\r\n                            Jatekos jatekos1 = jelenlegiJatek.jatekosok.get(jatekosneve);\r\n\r\n                            mezo1.ralep(jatekos1);\r\n                            System.out.println(jatekosneve + \"ralepett a \" + mezoneve + \"mezore!\");\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerült a lépés!\");\r\n                    }\r\n                    break;\r\n                case \"lyukaszt\":\r\n                    String jatekosnev = arguments[1];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.szabotorok.containsKey(jatekosnev)) {\r\n                            Szabotor szabotor1 = jelenlegiJatek.szabotorok.get(jatekosnev);\r\n\r\n                            szabotor1.lyukaszt();\r\n                            System.out.println(jatekosnev + \"kilyukasztotta a mezot,amin all\");\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult a lyukasztas\");\r\n                    }\r\n                case \"Foltoz\":\r\n                    String szerelonev = arguments[1];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.szerelok.containsKey(szerelonev)) {\r\n                            Szerelo szerelo1 = jelenlegiJatek.szerelok.get(szerelonev);\r\n\r\n                            szerelo1.foltoz();\r\n                            System.out.println(szerelonev + \"befoltozta a mezőt, amin áll!\");\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult a befoltozas!\");\r\n                    }\r\n                case \"Ragaszt\":\r\n                    String ragasztnev = arguments[1];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.szerelok.containsKey(ragasztnev)) {\r\n                            Jatekos jatekos1 = jelenlegiJatek.jatekosok.get(ragasztnev);\r\n\r\n                            jatekos1.ragaszt();\r\n                            System.out.println(ragasztnev + \"beragasztotta a mezőt, amin áll!\");\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult a mezo beragasztasa!\");\r\n                    }\r\n                case \"Vazelinez\":\r\n                    String vazelineznev = arguments[1];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.szerelok.containsKey(vazelineznev)) {\r\n                            Szabotor jatekos1 = jelenlegiJatek.szabotorok.get(vazelineznev);\r\n\r\n                            jatekos1.csuszik();\r\n                            System.out.println(vazelineznev + \"csuszossa tette a mezőt, amin áll!\");\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                    } catch (ProtoException e) {\r\n                        System.out.println(\"Nem sikerult a vezelinezes!\");\r\n                    }\r\n                case \"PumpatAllit\":\r\n                    String allitonev = arguments[1];\r\n                    String bemeneticso = arguments[2];\r\n                    String kimeneticso = arguments[3];\r\n                    try{\r\n                        if(jelenlegiJatek==null)throw new ProtoException();\r\n                        if(jelenlegiJatek.szerelok.containsKey(allitonev)&& jelenlegiJatek.csovek.containsKey(bemeneticso)&&jelenlegiJatek.csovek.containsKey(kimeneticso)){\r\n                            Szerelo sz1 = jelenlegiJatek.szerelok.get(allitonev);\r\n                            Mezo m1 = sz1.rajtaAll;\r\n                            Cso csobe = jelenlegiJatek.csovek.get(bemeneticso);\r\n                            Cso csoki = jelenlegiJatek.csovek.get(kimeneticso);\r\n                            if(m1.szomszedok.contains(csobe)&&m1.szomszedok.contains(csoki)) {\r\n                                m1.atAllit(csobe, csoki);\r\n                                System.out.println(allitonev + \"atallitotta a pumpat, amin allt\");\r\n                            }\r\n                        }else{\r\n                            throw new ProtoException();\r\n                        }\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa allitasa\");\r\n                    }\r\n                case \"Javit\":\r\n                    String javitnev = arguments[1];\r\n                    try {\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if (jelenlegiJatek.szerelok.containsKey(javitnev)) {\r\n                            Szerelo sz1 = jelenlegiJatek.szerelok.get(javitnev);\r\n                            sz1.foltoz();\r\n                            System.out.println(javitnev + \"megjavitotta a pumpat, amin allt\");\r\n                        } else {\r\n                            throw new ProtoException();\r\n                        }\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa javitasa\");\r\n                    }\r\n                case \"PumpaElront\":\r\n                    String pumpa = arguments[1];\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if(jelenlegiJatek.mezok.containsKey(pumpa)){\r\n                            Pumpa p = (Pumpa) jelenlegiJatek.mezok.get(pumpa);\r\n                            p.setMukodik(false);\r\n                            System.out.println(pumpa + \" nevű pumpa elromlott.\");\r\n                        }\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n                case \"CsoFelvesz\":\r\n                    String lecsatlakozatoNev = arguments[1];\r\n                    String lecsatlakoztatottCso = arguments[2];\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if(jelenlegiJatek.jatekosok.containsKey(lecsatlakozatoNev) && jelenlegiJatek.csovek.containsKey(lecsatlakoztatottCso)){\r\n\r\n                        }\r\n\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n                case \"CsoLerak\":\r\n                    String lerakNev = arguments[1];\r\n                    String lerakottMezo = arguments[2];\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if(jelenlegiJatek.jatekosok.containsKey(lerakNev) && jelenlegiJatek.mezok.containsKey(lerakottMezo)){\r\n\r\n                        }\r\n\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n                case \"PumpaVasarlas\":\r\n                    String vasarlo = arguments[1];\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if(jelenlegiJatek.jatekosok.containsKey(vasarlo)){\r\n\r\n                        }\r\n\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n                case \"PumpaLehelyez\":\r\n                    String lehelyezo = arguments[1];\r\n                    String lehelyezendoMezo = arguments[1];\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n                        if(jelenlegiJatek.jatekosok.containsKey(lehelyezo) && jelenlegiJatek.mezok.containsKey(lehelyezendoMezo)){\r\n\r\n                        }\r\n\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n                case \"RandomBe\":\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n\r\n                        System.out.println(\"Random mód bekapcsolva\");\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n                case \"RandomKi\":\r\n                    try{\r\n                        if (jelenlegiJatek == null) throw new ProtoException();\r\n\r\n\r\n                    }catch (ProtoException e){\r\n                        System.out.println(\"Nem sikerult a pumpa elrontasa\");\r\n                    }\r\n                    break;\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Vizhalozat/Proto.java b/src/Vizhalozat/Proto.java
--- a/src/Vizhalozat/Proto.java	(revision 824187d81812c0404066c0d49ae14df418daebbe)
+++ b/src/Vizhalozat/Proto.java	(date 1684058946246)
@@ -43,7 +43,7 @@
                         jatekAdatok.put(ujJatekNeve, new ProtoJatek());
                         System.out.println(ujJatekNeve + " sikeresen letrehozva!");
                     } else {
-                        System.out.println("Nem sikerult letrehozni a jatekot!");
+                        System.out.println("Nem sikerült létrehozni a játékot!");
                     }
                     break;
                 case "JatekKivalaszt":
@@ -52,7 +52,7 @@
                         jelenlegiJatek = jatekAdatok.get(jatekNeve);
                         System.out.println(jatekNeve + " kivalasztva!");
                     } else {
-                        System.out.println("Nem sikerult kivalasztani a jatekot!");
+                        System.out.println("Nem sikerült kivalasztani a játékot!");
                     }
                     break;
                 case "JatekKilep":
@@ -64,7 +64,7 @@
                     try {
                         parancsKezelo(new Scanner(fajl));
                     } catch (FileNotFoundException e) {
-                        System.out.println("Nem talalhato a megadott fajl!");
+                        System.out.println("Nem található a megadott fájl!");
                     }
                     break;
                 }
@@ -87,9 +87,9 @@
                         } else {
                             throw new ProtoException();
                         }
-                        System.out.println(ujJatekosNeve + " jatekos sikeresen letrehozva!");
+                        System.out.println(ujJatekosNeve + " játékos sikeresen létrehozva!");
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult letrehozni a jatekost");
+                        System.out.println("Nem sikerült letrehozni a játékost");
                     }
                     break;
                 case "MezoLetrehoz": {
@@ -118,9 +118,9 @@
                         } else {
                             throw new ProtoException();
                         }
-                        System.out.println(mezoNeve + " mezo sikeresen letrehozva!");
+                        System.out.println(mezoNeve + " mező sikeresen létrehozva!");
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult letrehozni a mezot!");
+                        System.out.println("Nem sikerült létrehozni a mezőt!");
                     }
                     break;
                 }
@@ -137,9 +137,9 @@
                         } else {
                             throw new ProtoException();
                         }
-                        System.out.println("Szomszedsag beallitva!");
+                        System.out.println("Szomszedság beállítva!");
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult beallitani a szomszedokat!");
+                        System.out.println("Nem sikerült beállitani a szomszédokat!");
                     }
                     break;
             }
@@ -244,7 +244,7 @@
                             Jatekos jatekos1 = jelenlegiJatek.jatekosok.get(jatekosneve);
 
                             mezo1.ralep(jatekos1);
-                            System.out.println(jatekosneve + "ralepett a " + mezoneve + "mezore!");
+                            System.out.println(jatekosneve + "rálépett a " + mezoneve + "mezőre!");
                         } else {
                             throw new ProtoException();
                         }
@@ -261,12 +261,12 @@
                             Szabotor szabotor1 = jelenlegiJatek.szabotorok.get(jatekosnev);
 
                             szabotor1.lyukaszt();
-                            System.out.println(jatekosnev + "kilyukasztotta a mezot,amin all");
+                            System.out.println(jatekosnev + "kilyukasztotta a mezőt, amin áll!");
                         } else {
                             throw new ProtoException();
                         }
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult a lyukasztas");
+                        System.out.println("Nem sikerült a lyukasztás!");
                     }
                 case "Foltoz":
                     String szerelonev = arguments[1];
@@ -281,7 +281,7 @@
                             throw new ProtoException();
                         }
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult a befoltozas!");
+                        System.out.println("Nem sikerült a befoltozas!");
                     }
                 case "Ragaszt":
                     String ragasztnev = arguments[1];
@@ -296,7 +296,7 @@
                             throw new ProtoException();
                         }
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult a mezo beragasztasa!");
+                        System.out.println("Nem sikerült a mező beragasztása!");
                     }
                 case "Vazelinez":
                     String vazelineznev = arguments[1];
@@ -311,7 +311,7 @@
                             throw new ProtoException();
                         }
                     } catch (ProtoException e) {
-                        System.out.println("Nem sikerult a vezelinezes!");
+                        System.out.println("Nem sikerült a vazelinezés!");
                     }
                 case "PumpatAllit":
                     String allitonev = arguments[1];
@@ -326,13 +326,13 @@
                             Cso csoki = jelenlegiJatek.csovek.get(kimeneticso);
                             if(m1.szomszedok.contains(csobe)&&m1.szomszedok.contains(csoki)) {
                                 m1.atAllit(csobe, csoki);
-                                System.out.println(allitonev + "atallitotta a pumpat, amin allt");
+                                System.out.println(allitonev + "atallitotta a pumpat, amin áll!");
                             }
                         }else{
                             throw new ProtoException();
                         }
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa allitasa");
+                        System.out.println("Nem sikerült a pumpa állitása!");
                     }
                 case "Javit":
                     String javitnev = arguments[1];
@@ -346,7 +346,7 @@
                             throw new ProtoException();
                         }
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa javitasa");
+                        System.out.println("Nem sikerült a pumpa javítása!");
                     }
                 case "PumpaElront":
                     String pumpa = arguments[1];
@@ -358,7 +358,7 @@
                             System.out.println(pumpa + " nevű pumpa elromlott.");
                         }
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerült a pumpa elrontása!");
                     }
                     break;
                 case "CsoFelvesz":
@@ -371,7 +371,7 @@
                         }
 
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerült a cső felvétele!");
                     }
                     break;
                 case "CsoLerak":
@@ -384,7 +384,7 @@
                         }
 
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerült a cső lerakása!");
                     }
                     break;
                 case "PumpaVasarlas":
@@ -396,12 +396,12 @@
                         }
 
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerült a pumpa vásárlása!");
                     }
                     break;
                 case "PumpaLehelyez":
                     String lehelyezo = arguments[1];
-                    String lehelyezendoMezo = arguments[1];
+                    String lehelyezendoMezo = arguments[2];
                     try{
                         if (jelenlegiJatek == null) throw new ProtoException();
                         if(jelenlegiJatek.jatekosok.containsKey(lehelyezo) && jelenlegiJatek.mezok.containsKey(lehelyezendoMezo)){
@@ -409,27 +409,108 @@
                         }
 
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerult a pumpa lehelyezése!");
                     }
                     break;
                 case "RandomBe":
                     try{
                         if (jelenlegiJatek == null) throw new ProtoException();
-
+                        jelenlegiJatek.randomKi = false;
                         System.out.println("Random mód bekapcsolva");
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerult a random mód bekapcsolása!");
                     }
                     break;
                 case "RandomKi":
                     try{
                         if (jelenlegiJatek == null) throw new ProtoException();
-
-
+                        jelenlegiJatek.randomKi = true;
+                        System.out.println("Random mód kikapcsolva");
                     }catch (ProtoException e){
-                        System.out.println("Nem sikerult a pumpa elrontasa");
+                        System.out.println("Nem sikerult a random mód kikapcsolása!");
+                    }
+                    break;
+                case "Befolyik":
+                    String mezoneve1 = arguments[1];
+                    try{
+                        if (jelenlegiJatek == null) throw new ProtoException();
+                        if(jelenlegiJatek.mezok.containsKey(mezoneve1)){
+                            Mezo m = jelenlegiJatek.mezok.get(mezoneve1);
+                            m.befolyik();
+                            System.out.println(m + "-be befolyik a víz ");
+                            for (Mezo m1: m.getSzomszedok()) {
+                                System.out.println(m1 +  "-be tovább folyt a víz!");
+                            }
+                        }
+                    }catch (ProtoException e){
+                        System.out.println("Nem sikerült!");
+                    }
+                    break;
+                case "Var":
+                    int msIdo = Integer.parseInt(arguments[1]);
+                    try{
+                        if (jelenlegiJatek == null) throw new ProtoException();
+                        Thread.sleep(msIdo);
+                        System.out.println(msIdo + "ms várása!");
+                    }catch (ProtoException | InterruptedException e){
+                        System.out.println("Nem sikerült várni!");
                     }
                     break;
+                case "Vizfolyas":
+                    try{
+                        if (jelenlegiJatek == null) throw new ProtoException();
+                        jelenlegiJatek.jatek.vizFolyas(jelenlegiJatek.randomKi);
+                        System.out.println("Sikerült!");
+                    }catch (ProtoException e){
+                        System.out.println("Nem sikerült!");
+                    }
+                    break;
+                case "BeallitCso":
+                    String csoNeve = arguments[1];
+                    boolean lyukase = arguments[2].equalsIgnoreCase("igen");
+                    boolean ragade = arguments[3].equalsIgnoreCase("igen");
+                    boolean csuszike = arguments[4].equalsIgnoreCase("igen");
+                    int msLyukasztasIdo = Integer.parseInt(arguments[5]);
+                    String ragasztottaNeve = arguments[6];
+                    try{
+                        if (jelenlegiJatek == null) throw new ProtoException();
+                        if(jelenlegiJatek.mezok.containsKey(csoNeve)) {
+                            Cso cso1 = (Cso) jelenlegiJatek.mezok.get(csoNeve);
+                            cso1.lyukas = lyukase;
+                            cso1.ragad = ragade;
+                            cso1.csuszik = csuszike;
+                            cso1.lyukasztasiIdo = msLyukasztasIdo;
+                            if(jelenlegiJatek.jatekosok.containsKey(ragasztottaNeve)) cso1.ragasztotta = jelenlegiJatek.jatekosok.get(ragasztottaNeve);
+                            System.out.println(csoNeve + " állapota sikeresen beállítva: " + "lyukas: " + (lyukase ? "igen " : "nem ") + "ragad: " + (ragade ? "igen " : "nem ")
+                                    + "csúszik: " + (csuszike ? "igen " : "nem ") + "lyukasztási idő: " + msLyukasztasIdo +  " ragasztotta: " + ragasztottaNeve);
+                        }
+                    }catch (ProtoException e){
+                        System.out.println("Nem sikerült a cső beállítása!");
+                    }
+                    break;
+                case "Pumpaszerkesztes":
+                    String pumpaNeve = arguments[1];
+                    String csoKimenet = arguments[2];
+                    String csoBemenet = arguments[3];
+                    try{
+                        if (jelenlegiJatek == null) throw new ProtoException();
+                        if(jelenlegiJatek.mezok.containsKey(pumpaNeve)) {
+                            Pumpa pumpa1 = (Pumpa) jelenlegiJatek.mezok.get(pumpaNeve);
+                            Cso kimenet = null;
+                            Cso bemenet = null;
+                            for (Mezo cs1 : pumpa1.getSzomszedok()) {
+                                if(cs1.equals((Cso) jelenlegiJatek.mezok.get(csoKimenet))) kimenet = (Cso) jelenlegiJatek.mezok.get(csoKimenet);
+                                else if( cs1.equals((Cso) jelenlegiJatek.mezok.get(csoBemenet))) bemenet = (Cso) jelenlegiJatek.mezok.get(csoBemenet);
+                            }
+                            pumpa1.atAllit(bemenet, kimenet);
+                            System.out.println(pumpaNeve + " beállítva!");
+                        }
+                    }catch (ProtoException e){
+                        System.out.println("Nem sikerült beállítani!");
+                    }
+                    break;
+                default:
+                    throw new IllegalStateException("Nem megfelelő formátum: " + arguments[0]);
 
             }
         }
Index: src/Vizhalozat/Jatekos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Vizhalozat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * A játékot játszó játékosok absztrakt osztálya, definálja a közös akciókat.\r\n */\r\npublic abstract class Jatekos {\r\n    protected Szkeleton szkeleton;  // a figyelő és hívásszámontartó osztály referenciája\r\n    protected Jatek jatek;  // Jatekot irányító osztály referenciája\r\n    protected Viheto tart; //referencia a tárgyra, amit a játékos tart\r\n    protected Cso csoTart; //a játékos kezében lévő cső referenciája\r\n    protected Mezo rajtaAll; // referencia a mezőre, amin a játékos áll\r\n    protected int varakozasiIdo; // a játékosnak mennyi időt kell várnia a következő aktív akciójáig\r\n    protected int ragadasiIdo;\r\n\r\n    /**\r\n     * A játékos egyetlen konstruktora\r\n     */\r\n    public Jatekos() {\r\n    }\r\n\r\n    /**\r\n     * Amikor a játékos csőre lép, ekkor hívja ezt a függvényt\r\n     * lekéri a pozíciója szomszédjait és ha nem állnak a lépni kívánt csövön átlép rá és lelép az aktuálísról\r\n     * @param szomszed a cso típusú objektum amire lép a játékos\r\n     */\r\n    public void lepes(Cso szomszed){\r\n//        szkeleton.ujObjektum(szomszed, \"szomszed\");\r\n//\r\n//        szkeleton.hivas(this, \"lepes\");\r\n//        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();\r\n//\r\n//        szomszedok.add(szomszed);\r\n//\r\n//        if(szomszedok.contains(szomszed)){\r\n//            szkeleton.hivas(szomszed, \"ralep\");\r\n//\r\n//            String valasz = szkeleton.kerdes(szomszed, \"Áll játékos éppen a kiválasztott csövön? (igen/nem)\");\r\n//\r\n//            if(valasz.equals(\"igen\")){\r\n//                szkeleton.visszateres(szomszed, \"ralep\", \"false\");\r\n//            } else if (valasz.equals(\"nem\")) {\r\n//                szkeleton.visszateres(szomszed, \"ralep\", \"true\");\r\n//\r\n//                szkeleton.hivas(rajtaAll, \"lelep\");\r\n//                szkeleton.visszateres(rajtaAll, \"lelep\");\r\n//            }\r\n//        }\r\n//\r\n//        szkeleton.visszateres(this, \"lepes\");\r\n\r\n        if(rajtaAll.getSzomszedok().contains(szomszed) && szomszed.getRajtaAllnak().isEmpty()){\r\n            szomszed.ralep(this);\r\n            rajtaAll.lelep(this);\r\n        }\r\n    }\r\n\r\n    public void setRagadasiIdo(int x) { ragadasiIdo = x; }\r\n\r\n    /**\r\n     * Amikor a játékos NEM csőre lép, ekkor hívja ezt a függvényt\r\n     * lekéri a pozíciója szomszédjait és ha a visszakapott szomszédok között van a lépni kívánt AktívElem, rálép\r\n     * @param szomszed a AktivElemek típusú objektum amire lép a játékos\r\n     */\r\n    public void lepes(AktivElemek szomszed){\r\n//        szkeleton.ujObjektum(szomszed, \"szomszed\");\r\n//\r\n//        szkeleton.hivas(this, \"lepes\");\r\n//        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();\r\n//\r\n//        szomszedok.add(szomszed);\r\n//\r\n//        if(szomszedok.contains(szomszed)){\r\n//            szkeleton.hivas(szomszed, \"ralep\");\r\n//            szkeleton.visszateres(szomszed, \"ralep\", \"true\");\r\n//\r\n//            szkeleton.hivas(rajtaAll, \"lelep\");\r\n//            szkeleton.visszateres(rajtaAll, \"lelep\");\r\n//\r\n//        }else{\r\n//            szkeleton.visszateres(szomszed, \"ralep\", \"false\");\r\n//        }\r\n//\r\n//        szkeleton.visszateres(this, \"lepes\");\r\n\r\n        if(rajtaAll.getSzomszedok().contains(szomszed)){\r\n            szomszed.ralep(this);\r\n            rajtaAll.lelep(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * megkísérli átállítani a mezőt, amin áll, csak pumpa mezőn hatásos\r\n     */\r\n    public void pumpaAllitas(){\r\n//        szkeleton.hivas(this, \"pumpaAllitas\");\r\n//\r\n//        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();\r\n//        Cso[] csovek = new Cso[2];\r\n//        if(szomszedok.size() > 0) {\r\n//            for (int i = 0; i < 2; i++) {\r\n//                for (int j = 1; j <= szomszedok.size(); j++) {\r\n//                    szkeleton.uzenet(\"Cső \" + j);\r\n//                }\r\n//                int valasz = Integer.parseInt(szkeleton.kerdes(this, \"Az \" + (i + 1) + \". cső kiválasztása: (A fentiek közül)\"));\r\n//                if (valasz > 0 && valasz <= szomszedok.size()) csovek[i] = (Cso) szomszedok.remove(valasz - 1);\r\n//                else {\r\n//                    System.out.println(\"Nem megfelelő válasz!\");\r\n//                    i--;\r\n//                }\r\n//            }\r\n//        }\r\n//\r\n//        rajtaAll.atAllit(csovek[0], csovek[1]);\r\n//\r\n//        szkeleton.visszateres(this, \"pumpaAllitas\");\r\n    }\r\n\r\n    /**\r\n     * Megkísérli a cső lehelyézést a mezőn amin áll a\r\n     * csoLehelyez függvény meghívásával,\r\n     * ha sikeres lerakja a csövet az aktuális és az m: Mező közé\r\n     */\r\n    public void lerak_cso(){\r\n//        szkeleton.hivas(this,\"lerak_cso\");\r\n//        rajtaAll.csoLehelyezes(csoTart);\r\n//        szkeleton.visszateres(this,\"lerak_cso\");\r\n\r\n    }\r\n\r\n    /**\r\n     * Megkísérel felvenni egy csövet a megadott mezőről\r\n     * @param felvesz annak csőnek a referenciája, amit felvesz\r\n     */\r\n    public void felvesz_cso(Cso felvesz){\r\n//        szkeleton.hivas(this,\"felvesz_cso\");\r\n//\r\n//        // itt at lehetne adni a Pumpat, amin a jatekos all, es akkor mehetne\r\n//        if(felvesz.felveszik()) {\r\n//            // remove jatekos.felvesz_cso()-ben van vagy a cso.felveszik()-ben\r\n//            rajtaAll.removeSzomszed(felvesz);\r\n//        }\r\n//        szkeleton.visszateres(this,\"felvesz_cso\");\r\n\r\n        rajtaAll.felveszik();\r\n    }\r\n\r\n    /**\r\n     * A Jatekos kezebe teszi valamilyen Vihető objektum referenciáját\r\n     * @param t\r\n     */\r\n    public void add_Kezebe(Viheto t){\r\n        this.tart = t;\r\n    }\r\n  /**\r\n   *  Megprobalja leragasztani a mezot\r\n   */\r\n    public void ragaszt(){\r\n        if(varakozasiIdo == 0) {\r\n            boolean siker = rajtaAll.ragaszt();\r\n            if(siker){\r\n                varakozasiIdo = 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void lyukaszt(){\r\n        if(varakozasiIdo == 0) {\r\n            boolean siker = rajtaAll.lyukaszt();\r\n            if(siker){\r\n                varakozasiIdo = 3;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Vizhalozat/Jatekos.java b/src/Vizhalozat/Jatekos.java
--- a/src/Vizhalozat/Jatekos.java	(revision 824187d81812c0404066c0d49ae14df418daebbe)
+++ b/src/Vizhalozat/Jatekos.java	(date 1684053600079)
@@ -1,6 +1,5 @@
 package Vizhalozat;
 import java.util.ArrayList;
-import java.util.List;
 
 /**
  * A játékot játszó játékosok absztrakt osztálya, definálja a közös akciókat.
@@ -12,12 +11,15 @@
     protected Cso csoTart; //a játékos kezében lévő cső referenciája
     protected Mezo rajtaAll; // referencia a mezőre, amin a játékos áll
     protected int varakozasiIdo; // a játékosnak mennyi időt kell várnia a következő aktív akciójáig
-    protected int ragadasiIdo;
 
     /**
      * A játékos egyetlen konstruktora
+     * @param rajtaAll A mező objektum referenciája
+     * @param szkeleton A szkeleton, tesztelő osztály konstruktora
      */
-    public Jatekos() {
+    public Jatekos(Mezo rajtaAll, Szkeleton szkeleton) {
+        this.rajtaAll = rajtaAll;
+        this.szkeleton = szkeleton;
     }
 
     /**
@@ -26,37 +28,30 @@
      * @param szomszed a cso típusú objektum amire lép a játékos
      */
     public void lepes(Cso szomszed){
-//        szkeleton.ujObjektum(szomszed, "szomszed");
-//
-//        szkeleton.hivas(this, "lepes");
-//        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();
-//
-//        szomszedok.add(szomszed);
-//
-//        if(szomszedok.contains(szomszed)){
-//            szkeleton.hivas(szomszed, "ralep");
-//
-//            String valasz = szkeleton.kerdes(szomszed, "Áll játékos éppen a kiválasztott csövön? (igen/nem)");
-//
-//            if(valasz.equals("igen")){
-//                szkeleton.visszateres(szomszed, "ralep", "false");
-//            } else if (valasz.equals("nem")) {
-//                szkeleton.visszateres(szomszed, "ralep", "true");
-//
-//                szkeleton.hivas(rajtaAll, "lelep");
-//                szkeleton.visszateres(rajtaAll, "lelep");
-//            }
-//        }
-//
-//        szkeleton.visszateres(this, "lepes");
+        szkeleton.ujObjektum(szomszed, "szomszed");
+
+        szkeleton.hivas(this, "lepes");
+        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();
+
+        szomszedok.add(szomszed);
+
+        if(szomszedok.contains(szomszed)){
+            szkeleton.hivas(szomszed, "ralep");
+
+            String valasz = szkeleton.kerdes(szomszed, "Áll játékos éppen a kiválasztott csövön? (igen/nem)");
 
-        if(rajtaAll.getSzomszedok().contains(szomszed) && szomszed.getRajtaAllnak().isEmpty()){
-            szomszed.ralep(this);
-            rajtaAll.lelep(this);
-        }
-    }
+            if(valasz.equals("igen")){
+                szkeleton.visszateres(szomszed, "ralep", "false");
+            } else if (valasz.equals("nem")) {
+                szkeleton.visszateres(szomszed, "ralep", "true");
+
+                szkeleton.hivas(rajtaAll, "lelep");
+                szkeleton.visszateres(rajtaAll, "lelep");
+            }
+        }
 
-    public void setRagadasiIdo(int x) { ragadasiIdo = x; }
+        szkeleton.visszateres(this, "lepes");
+    }
 
     /**
      * Amikor a játékos NEM csőre lép, ekkor hívja ezt a függvényt
@@ -64,57 +59,52 @@
      * @param szomszed a AktivElemek típusú objektum amire lép a játékos
      */
     public void lepes(AktivElemek szomszed){
-//        szkeleton.ujObjektum(szomszed, "szomszed");
-//
-//        szkeleton.hivas(this, "lepes");
-//        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();
-//
-//        szomszedok.add(szomszed);
-//
-//        if(szomszedok.contains(szomszed)){
-//            szkeleton.hivas(szomszed, "ralep");
-//            szkeleton.visszateres(szomszed, "ralep", "true");
-//
-//            szkeleton.hivas(rajtaAll, "lelep");
-//            szkeleton.visszateres(rajtaAll, "lelep");
-//
-//        }else{
-//            szkeleton.visszateres(szomszed, "ralep", "false");
-//        }
-//
-//        szkeleton.visszateres(this, "lepes");
+        szkeleton.ujObjektum(szomszed, "szomszed");
+
+        szkeleton.hivas(this, "lepes");
+        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();
 
-        if(rajtaAll.getSzomszedok().contains(szomszed)){
-            szomszed.ralep(this);
-            rajtaAll.lelep(this);
+        szomszedok.add(szomszed);
+
+        if(szomszedok.contains(szomszed)){
+            szkeleton.hivas(szomszed, "ralep");
+            szkeleton.visszateres(szomszed, "ralep", "true");
+
+            szkeleton.hivas(rajtaAll, "lelep");
+            szkeleton.visszateres(rajtaAll, "lelep");
+
+        }else{
+            szkeleton.visszateres(szomszed, "ralep", "false");
         }
+
+        szkeleton.visszateres(this, "lepes");
     }
 
     /**
      * megkísérli átállítani a mezőt, amin áll, csak pumpa mezőn hatásos
      */
     public void pumpaAllitas(){
-//        szkeleton.hivas(this, "pumpaAllitas");
-//
-//        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();
-//        Cso[] csovek = new Cso[2];
-//        if(szomszedok.size() > 0) {
-//            for (int i = 0; i < 2; i++) {
-//                for (int j = 1; j <= szomszedok.size(); j++) {
-//                    szkeleton.uzenet("Cső " + j);
-//                }
-//                int valasz = Integer.parseInt(szkeleton.kerdes(this, "Az " + (i + 1) + ". cső kiválasztása: (A fentiek közül)"));
-//                if (valasz > 0 && valasz <= szomszedok.size()) csovek[i] = (Cso) szomszedok.remove(valasz - 1);
-//                else {
-//                    System.out.println("Nem megfelelő válasz!");
-//                    i--;
-//                }
-//            }
-//        }
-//
-//        rajtaAll.atAllit(csovek[0], csovek[1]);
-//
-//        szkeleton.visszateres(this, "pumpaAllitas");
+        szkeleton.hivas(this, "pumpaAllitas");
+
+        ArrayList<Mezo> szomszedok = rajtaAll.getSzomszedok();
+        Cso[] csovek = new Cso[2];
+        if(szomszedok.size() > 0) {
+            for (int i = 0; i < 2; i++) {
+                for (int j = 1; j <= szomszedok.size(); j++) {
+                    szkeleton.uzenet("Cső " + j);
+                }
+                int valasz = Integer.parseInt(szkeleton.kerdes(this, "Az " + (i + 1) + ". cső kiválasztása: (A fentiek közül)"));
+                if (valasz > 0 && valasz <= szomszedok.size()) csovek[i] = (Cso) szomszedok.remove(valasz - 1);
+                else {
+                    System.out.println("Nem megfelelő válasz!");
+                    i--;
+                }
+            }
+        }
+
+        rajtaAll.atAllit(csovek[0], csovek[1]);
+
+        szkeleton.visszateres(this, "pumpaAllitas");
     }
 
     /**
@@ -123,9 +113,9 @@
      * ha sikeres lerakja a csövet az aktuális és az m: Mező közé
      */
     public void lerak_cso(){
-//        szkeleton.hivas(this,"lerak_cso");
-//        rajtaAll.csoLehelyezes(csoTart);
-//        szkeleton.visszateres(this,"lerak_cso");
+        szkeleton.hivas(this,"lerak_cso");
+        rajtaAll.csoLehelyezes(csoTart);
+        szkeleton.visszateres(this,"lerak_cso");
 
     }
 
@@ -134,16 +124,14 @@
      * @param felvesz annak csőnek a referenciája, amit felvesz
      */
     public void felvesz_cso(Cso felvesz){
-//        szkeleton.hivas(this,"felvesz_cso");
-//
-//        // itt at lehetne adni a Pumpat, amin a jatekos all, es akkor mehetne
-//        if(felvesz.felveszik()) {
-//            // remove jatekos.felvesz_cso()-ben van vagy a cso.felveszik()-ben
-//            rajtaAll.removeSzomszed(felvesz);
-//        }
-//        szkeleton.visszateres(this,"felvesz_cso");
+        szkeleton.hivas(this,"felvesz_cso");
 
-        rajtaAll.felveszik();
+        // itt at lehetne adni a Pumpat, amin a jatekos all, es akkor mehetne
+        if(felvesz.felveszik()) {
+            // remove jatekos.felvesz_cso()-ben van vagy a cso.felveszik()-ben
+            rajtaAll.removeSzomszed(felvesz);
+        }
+        szkeleton.visszateres(this,"felvesz_cso");
     }
 
     /**
@@ -153,24 +141,8 @@
     public void add_Kezebe(Viheto t){
         this.tart = t;
     }
-  /**
-   *  Megprobalja leragasztani a mezot
-   */
-    public void ragaszt(){
-        if(varakozasiIdo == 0) {
-            boolean siker = rajtaAll.ragaszt();
-            if(siker){
-                varakozasiIdo = 3;
-            }
-        }
-    }
 
-    public void lyukaszt(){
-        if(varakozasiIdo == 0) {
-            boolean siker = rajtaAll.lyukaszt();
-            if(siker){
-                varakozasiIdo = 3;
-            }
-        }
-    }
+    public boolean ragaszt() { return false; };
+
+    public void setRagadasiIdo(int i) {return;};
 }
Index: src/Vizhalozat/Pumpa.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Vizhalozat;\r\n\r\nimport java.util.Random;\r\n\r\n/**\r\n * Legalább két csövet csatlakoztató mező típus a bemenetéből a kimenetébe pumpálja a vizet, ha működik.\r\n */\r\npublic class Pumpa extends AktivElemek implements Viheto{\r\n    /**\r\n     * Azt jelöli, hogy a pumpa rossz-e vagy működik\r\n     */\r\n    private boolean mukodik;\r\n    /**\r\n     * A bemeneti cső referenciája\r\n     */\r\n    private Cso bemenet;\r\n    /**\r\n     * A kimeneti cső referenciája\r\n     */\r\n    private Cso kimenet;\r\n\r\n    /**\r\n     * A Pumpa egyetlen konstruktora\r\n     * @param jatek A játék objektum referenciája\r\n     */\r\n    public Pumpa(Jatek jatek) {\r\n        super(jatek);\r\n        mukodik = true;\r\n    }\r\n\r\n    /**\r\n     *  ha a függvény hívásakor a pumpa nem vízzel telített\r\n     *  és a bemenete vízzel telített, vízzel telítetté válik a pumpa is,\r\n     *  meghívja a kimenetének a befolyik függvényét\r\n     */\r\n    @Override\r\n    public void befolyik() {\r\n//        szkeleton.hivas(this, \"befolyik\");\r\n//        if(mukodik && bemenet.getTelitett() && !this.telitett) {\r\n//            telitett = true;\r\n//            kimenet.befolyik();\r\n//        }\r\n//        szkeleton.visszateres(this, \"befolyik\");\r\n\r\n        if(!telitett && bemenet.getTelitett()){\r\n            telitett = true;\r\n            kimenet.befolyik();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Átállítja a pumpa be- és kimenetét a megadott csövekre\r\n     * @param be A pumpa új bemenete\r\n     * @param ki A pumpa új kimenete\r\n     * @return Mindig true-val tér vissza\r\n     */\r\n    @Override\r\n    public boolean atAllit(Cso be, Cso ki) {\r\n//        szkeleton.hivas(this, \"atAllit\");\r\n//        szkeleton.visszateres(this, \"atAllit\", \"true\");\r\n\r\n        bemenet = be;\r\n        kimenet = ki;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ha a pumpa eddig rossz volt megjavítódik\r\n     * @return ha pumpa rossz volt true-val tér vissza, ha nem akkor false-al\r\n     */\r\n    @Override\r\n    public boolean javitjak() {\r\n//        szkeleton.hivas(this, \"javitjak\");\r\n//        if(szkeleton.kerdes(this, \"Javításra van szükség? (Igen, Nem)\").equalsIgnoreCase(\"igen\")){\r\n//            mukodik = true;\r\n//            szkeleton.visszateres(this, \"javitjak\", \"true\");\r\n//            return true;\r\n//        }\r\n//        else {\r\n//            szkeleton.visszateres(this, \"javitjak\", \"false\");\r\n//            return false;\r\n//        }\r\n\r\n        if(!mukodik){\r\n            mukodik = true;\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public Mezo megcsuszik() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean ragaszt() {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean csuszik() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * minden körben lefut a függvény és randomizált folyamat végén eldől,\r\n     * hogy elromlik az adott pumpa vagy sem\r\n     */\r\n    public void elromlik() {\r\n//        szkeleton.hivas(this, \"elromlik\");\r\n//        mukodik = false;\r\n//        szkeleton.visszateres(this, \"elromlik\");\r\n\r\n        Random rnd = new Random();\r\n        int hatar = rnd.nextInt(10) + 1;\r\n        if(hatar == 10){\r\n            mukodik = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * meghívja a tartó játékos lerak_pumpa metódusát\r\n     * @param lerako az a jatekos, akinek meghivja a metodusat\r\n     */\r\n    @Override\r\n    public void lerakjak(Jatekos lerako) {\r\n//        szkeleton.hivas(this, \"lerakjak\");\r\n//        szkeleton.visszateres(this, \"lerakjak\");\r\n    }\r\n\r\n    @Override\r\n    public boolean felveszik() {\r\n        return super.felveszik();\r\n    }\r\n\r\n    /**\r\n     * egy szerelő megpróbálja letenni a pumpát a kezéből a pumpára amin áll\r\n     * @param p A lehelyezendő pumpa\r\n     * @return Mindig hamissal tér vissza és nem történik semmi\r\n     */\r\n    @Override\r\n    public boolean pumpaLehelyez(Pumpa p) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * setter\r\n     * @param cs lesz az új bemenet\r\n     */\r\n    public void setBemenet(Cso cs){\r\n        this.bemenet = cs;\r\n    }\r\n    /**\r\n     * setter\r\n     * @param cs lesz az új kimenet\r\n     */\r\n    public void setKimenet(Cso cs){\r\n        this.kimenet = cs;\r\n    }\r\n\r\n    public void setMukodik(boolean mukodik) {\r\n        this.mukodik = mukodik;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Vizhalozat/Pumpa.java b/src/Vizhalozat/Pumpa.java
--- a/src/Vizhalozat/Pumpa.java	(revision 824187d81812c0404066c0d49ae14df418daebbe)
+++ b/src/Vizhalozat/Pumpa.java	(date 1684058946239)
@@ -58,9 +58,11 @@
     public boolean atAllit(Cso be, Cso ki) {
 //        szkeleton.hivas(this, "atAllit");
 //        szkeleton.visszateres(this, "atAllit", "true");
-
-        bemenet = be;
-        kimenet = ki;
+        if(be != null && ki != null) {
+            bemenet = be;
+            kimenet = ki;
+        }
+        else throw new RuntimeException("Nem megfelelo be / kimenet");
         return true;
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"42eca659-eca3-45a1-802e-11296cb13373\" name=\"Changes\" comment=\"&#10;Push hogy mas ne kezdje el ami mar meglehet\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Vizhalozat/Proto.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Vizhalozat/Proto.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Vizhalozat/Pumpa.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Vizhalozat/Pumpa.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2OPjhpCATCZ3MLgG7nsG1xmDBF6\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Szelestey\\IdeaProjects\\Vizhalozat\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"App\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Vizhalozat.App\" />\r\n      <module name=\"Vizhalozat\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"42eca659-eca3-45a1-802e-11296cb13373\" name=\"Changes\" comment=\"\" />\r\n      <created>1681469248739</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1681469248739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"elso commit\">\r\n      <created>1681469342419</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681469342420</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"masodik\">\r\n      <created>1681469449647</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681469449647</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"szkeleton, félig kész osztályok\">\r\n      <created>1681475786680</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681475786680</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"javitas\">\r\n      <created>1681476055212</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681476055212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"69 kilepes\">\r\n      <created>1681476354109</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681476354109</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"16-17-es teszt esetek elkészítése\">\r\n      <created>1681598772351</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681598772351</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Szabotor osztaly\">\r\n      <created>1681598949648</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681598949648</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"20-as teszt eset elkészítése\">\r\n      <created>1681601609432</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681601609432</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"18-as teszt eset elkészítése\">\r\n      <created>1681603519626</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681603519626</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"19-es teszt eset elkészítése\">\r\n      <created>1681604676023</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681604676023</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"első 20 teszt fasza, minimális javítások\">\r\n      <created>1681670843667</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681670843667</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"kommentek csőnél\">\r\n      <created>1681675334635</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681675334635</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"kommentek csőnél\">\r\n      <created>1681675455800</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681675455800</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"szkeleton kommentezése\">\r\n      <created>1681676699224</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681676699224</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"szkeleton kommentezése\">\r\n      <created>1681676745972</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681676745972</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"&#10;Push hogy mas ne kezdje el ami mar meglehet\">\r\n      <created>1684005333841</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684005333841</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"elso commit\" />\r\n    <MESSAGE value=\"masodik\" />\r\n    <MESSAGE value=\"szkeleton, félig kész osztályok\" />\r\n    <MESSAGE value=\"javitas\" />\r\n    <MESSAGE value=\"69 kilepes\" />\r\n    <MESSAGE value=\"16-17-es teszt esetek elkészítése\" />\r\n    <MESSAGE value=\"Szabotor osztaly\" />\r\n    <MESSAGE value=\"20-as teszt eset elkészítése\" />\r\n    <MESSAGE value=\"18-as teszt eset elkészítése\" />\r\n    <MESSAGE value=\"19-es teszt eset elkészítése\" />\r\n    <MESSAGE value=\"első 20 teszt fasza, minimális javítások\" />\r\n    <MESSAGE value=\"kommentek csőnél\" />\r\n    <MESSAGE value=\"szkeleton kommentezése\" />\r\n    <MESSAGE value=\"&#10;Push hogy mas ne kezdje el ami mar meglehet\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"&#10;Push hogy mas ne kezdje el ami mar meglehet\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 824187d81812c0404066c0d49ae14df418daebbe)
+++ b/.idea/workspace.xml	(date 1684058946593)
@@ -6,8 +6,10 @@
   <component name="ChangeListManager">
     <list default="true" id="42eca659-eca3-45a1-802e-11296cb13373" name="Changes" comment="&#10;Push hogy mas ne kezdje el ami mar meglehet">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Vizhalozat/Jatekos.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Vizhalozat/Jatekos.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Vizhalozat/Proto.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Vizhalozat/Proto.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Vizhalozat/Pumpa.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Vizhalozat/Pumpa.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Vizhalozat/Szerelo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Vizhalozat/Szerelo.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -33,15 +35,15 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "node.js.selected.package.tslint": "(autodetect)"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\Szelestey\IdeaProjects\Vizhalozat" />
